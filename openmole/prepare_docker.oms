// departement 
val dept = Val[Int]
//options pass√©es en string
val optionsPrep = Val[String]

val globalDataDirectory = Val[File]
val localDataDirectory = Val[File]
val output = Val[File]

//DockerImage("juperret/erc")
//Vector.empty,"docker"
val dockerTask =
  //UDockerTask(workDirectory / "erc.tar",
  UDockerTask(DockerImage("juperret/erc"),
"""xvfb-run python3 prepare.py /tmp/global_data ${dept} /tmp/mtp /tmp/results "${optionsPrep}"""") set (
    (inputs, outputs) += (dept),
    (inputs, outputs) += optionsPrep,
    globalDataDirectory := workDirectory / "global_data",
    localDataDirectory := workDirectory / "local_data",
    inputFiles += (globalDataDirectory, "/tmp/global_data"),
    inputFiles += (localDataDirectory, "/tmp/mtp"),
    outputFiles += ("/tmp/results/${dept}/mtp/simulation/200m", output),
    optionsPrep := "pixRes=200"
  )

val exploration = ExplorationTask(dept in List(34))

val copy = CopyFileHook(output, workDirectory /"prepared_${dept}")

//val env = EGIEnvironment("vo.complex-systems.eu",openMOLEMemory = 2500 megabytes)
val env = LocalEnvironment(4)
exploration -< (dockerTask hook copy on env) 
