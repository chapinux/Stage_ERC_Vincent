// departement 
val dept = Val[Int]
//options passées en string
val optionsPrep = Val[String]

//===========================================

// taille maille raster
val gridSize = Val[Int]
// Taille du tampon utilisé pour extraire les iris et la donnée utile au delà des limites de la zone (comme les points SIRENE)
val bufferDistance =Val[Int]  
// Surfaces au sol minimales et maximales pour considérer un bâtiment comme habitable
val minSurf = Val[Int]
val maxSurf = Val[Int]
// Utilisation du taux de résidence principales pour réduire la surface plancher estimée
val useTxRP = Val[Boolean]
//Hauteur théorique d'un étage pour l'estimation du nombre de niveaux
val levelHeight = Val[Int]
//Taux maximum de chevauchement entre les cellules et des couches à exclure (ex: bati industriel)
val maxOverlapRatio = Val[Float]
// Paramètres variables pour la création des rasters de distance
val roadDist = Val[Int]
val transDist = Val[Int]
// Seuil de pente en % pour interdiction à la construction
val maxSlope= Val[Int]

val taux = Val[Double]
val res = Val[Int]

//=========================

val inputDirectory = Val[File]
val output = Val[File]

// python task
val pythonTask =
  UDockerTask(workDirectory / "erc.tar",
"""xvfb-run python3 simulate.py /app/prepared_data /app/results ${taux} "${optionsPrep}"""") set (
    inputDirectory := workDirectory / "results" / "departement34",
    inputs += (taux),
    inputs +=optionsPrep,
    outputs += (taux),
    inputFiles += (inputDirectory, "/app/prepared_data"),
    outputFiles += ("/app/results", output),
//    customWorkDirectory := "/tmp",
    optionsPrep:="scenario=tendanciel buildNonRes=True"
  )

 
val exploration = ExplorationTask((taux in List(0.5)))
//val copy = CopyFileHook(outputFiles, workDirectory / "prepare_${dept}")

val copy = CopyFileHook(output, workDirectory /"simulation_${taux}")

val env = EGIEnvironment("vo.complex-systems.eu",openMOLEMemory = 2500 megabytes)
//val env = LocalEnvironment(4)
exploration -< (pythonTask hook copy on env) 
